Solution1:
----------------------------------------------------------------------
SELECT Visits.customer_id, count(Visits.visit_id) as count_no_trans 
from visits 
Left join Transactions
On visits.visit_id = Transactions.visit_id
Where Transactions.visit_id IS NULL
Group by Visits.customer_id;

-----------------------------------------------------------------------------
-----------------------------------------------------------------------------
Explanation:

-->Here we've to count the number of "visit_id" who don't have any correspondent transaction_id in the Transactions Table.  
--> We're using left join because we need to include all the rows of the Visits table. 
--> Joined two table 
--> In the where clause we're taking those rows where the transaction value is null ( we know when there is no match for a joined row,
    value of that columns in the joined table will be filled with NULL) 
--> Group by is used when we use functions like -"(COUNT(), MAX(), MIN(), SUM(), AVG())" [aggregate functions]
--> We're grouping by the customer_id (it groups the result by the customer_id so that we can use the count function for each customer_id)

-------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------
Solution2:
---------------
SELECT visits.customer_id, COUNT(v.visit_id) as count_no_trans 
FROM Transactions 
RIGHT JOIN Visits 
ON visits.visit_id = transactions.visit_id
WHERE transactions.visit_id IS NULL
GROUP BY visits.customer_id
---------------
----------
Explanation: A similar concept to SN1
------------------------------------------------------------------
------------------------------------------------------------------
SOLUTION 3
--------------------
SELECT customer_id, count(visit_id) as count_no_trans 
From visits
Where visit_id NOT in (SELECT distinct visit_id
FROM Transactions)
group by customer_id;

---------------------------------
-------------------------------
Explanation: Very easy solution, with the NOT IN clause we will compare the visits_id of transactions and visits


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



Table: Visits

+-------------+---------+
| Column Name | Type    |
+-------------+---------+
| visit_id    | int     |
| customer_id | int     |
+-------------+---------+
visit_id is the column with unique values for this table.
This table contains information about the customers who visited the mall.
 

Table: Transactions

+----------------+---------+
| Column Name    | Type    |
+----------------+---------+
| transaction_id | int     |
| visit_id       | int     |
| amount         | int     |
+----------------+---------+
transaction_id is column with unique values for this table.
This table contains information about the transactions made during the visit_id.
 

Write a solution to find the IDs of the users who visited without making any transactions and the number of times they made these types of visits.

Return the result table sorted in any order.

The result format is in the following example.

 

Example 1:

Input: 
Visits
+----------+-------------+
| visit_id | customer_id |
+----------+-------------+
| 1        | 23          |
| 2        | 9           |
| 4        | 30          |
| 5        | 54          |
| 6        | 96          |
| 7        | 54          |
| 8        | 54          |
+----------+-------------+
Transactions
+----------------+----------+--------+
| transaction_id | visit_id | amount |
+----------------+----------+--------+
| 2              | 5        | 310    |
| 3              | 5        | 300    |
| 9              | 5        | 200    |
| 12             | 1        | 910    |
| 13             | 2        | 970    |
+----------------+----------+--------+
Output: 
+-------------+----------------+
| customer_id | count_no_trans |
+-------------+----------------+
| 54          | 2              |
| 30          | 1              |
| 96          | 1              |
+-------------+----------------+
Explanation: 
Customer with id = 23 visited the mall once and made one transaction during the visit with id = 12.
Customer with id = 9 visited the mall once and made one transaction during the visit with id = 13.
Customer with id = 30 visited the mall once and did not make any transactions.
Customer with id = 54 visited the mall three times. During 2 visits they did not make any transactions, and during one visit they made 3 transactions.
Customer with id = 96 visited the mall once and did not make any transactions.
As we can see, users with IDs 30 and 96 visited the mall one time without making any transactions. Also, user 54 visited the mall twice and did not make any transactions.
